package malwaretd;

import java.awt.Image;
import java.util.List;

import jgame.Context;
import jgame.GObject;
import jgame.GSprite;
import jgame.controller.ConstantMovementController;
import jgame.listener.FrameListener;
import jgame.listener.TimerListener;

public abstract class Turret extends GSprite {
	private boolean placed = false;
	private int fireTimer = 0;
	private boolean fireOK = true;
	private int bulletsFired = 0;
	private int fireCoolDown;  //getFireCoolDown();
	
	public double distance(Turret t, Enemy e)
	{
		double tx = t.getX();
		double ty = t.getY();
		
		double ex = e.getX();
		double ey = e.getY();
		
		
		
		return Math.sqrt(Math.pow(tx-ex,2)+Math.pow(ty-ey, 2));
	}

	public Turret(Image image, int damage, int firerate) {
		super(image);


			
		TimerListener tl = new TimerListener(firerate) {
			 
			
			
			@Override
			public void invoke(GObject target, Context context) {
				
				List<Enemy> enemies = context.getInstancesOfClass(Enemy.class);
				double minimumDistance = Integer.MAX_VALUE;
				Enemy closest = null;

				for (Enemy e : enemies) {
					double d = e.distanceTo(target);
					if (d < minimumDistance) {
						minimumDistance = d;
						closest = e;
					}
				}
                
				if (closest != null) {
					target.face(closest);
					if (GameView.settingTurret == false)
						{
						fireBullet();
						bulletsFired++;
						}
					if (bulletsFired >= getDurability())
						target.removeSelf();
						

					// ++++++++++++++++++++++++++++++++
//					if (bulletsFired >= 5) 
//					{
//						fireOK = false;
//						bulletsFired = 0;
//					}
					// ++++++++++++++++++++++++++++++++++++++++++++++
}
				}
				
		};
		
		addListener(tl);
		
		
				


				// initiate fireCoolDown
				if (!fireOK) {
					fireCoolDown--;
					if (fireCoolDown < 0) {
						fireCoolDown = getFireCoolDown();
						fireOK = true;
					}
				}
	}

	
	public abstract double getFireRange();

	public abstract int getFireDelay();

	public abstract Bullet createBullet();

	public abstract double getBulletSpeed();

	public abstract double getBulletPowa();
	
	public abstract double getBulletSlowing();

	public abstract int getFireCoolDown();
	
	public abstract int getPiercing();

	public abstract int getCost();
	
	public abstract int getDurability();
	
	public void fireBullet() {
		final Bullet b = createBullet();

		b.setRotation(this.getRotation());

		final ConstantMovementController c = ConstantMovementController
				.createPolar(getBulletSpeed(), getRotation());

		b.addController(c);
	
		snapAnchor(b);
	
		b.moveAtAngle(getWidth() / 2 + 20, getRotation());
		this.addSibling(b);


	}


}
