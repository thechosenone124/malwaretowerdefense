package malwaretd;

import java.awt.Image;
import java.util.List;
import jgame.Context;
import jgame.GObject;
import jgame.GSprite;
import jgame.controller.ConstantMovementController;
import jgame.listener.FrameListener;

public abstract class Turret extends GSprite {
	private boolean placed = false;
	private int fireTimer = 0;
	private boolean fireOK = true;
	private int bulletsFired = 0;
	private int fireCoolDown = getFireCoolDown();

	public Turret(Image image, int damage, int firerate) {
		super(image);

		this.addListener(new FrameListener() {

			@Override
			public void invoke(GObject target, Context context) {
				// if not placed exit the invoke function
				System.out.println(placed);
				if (!placed) {
					return;
				}

				// set rotation of turret to point toward nearest enemy
				// this is pointing to a list that jgame has created w/o alloct
				List<Enemy> enemies = context.getInstancesOfClass(Enemy.class);
				double minimumDistance = Integer.MAX_VALUE;
				Enemy closest = null;

				for (Enemy e : enemies) {
					double d = e.distanceTo(target);
					if (d < minimumDistance) {
						minimumDistance = d;
						closest = e;
					}
				}
				fireTimer--;
				if (closest != null) {
					target.face(closest);

					// If placed fire bullet
					if (fireTimer < 0
							&& (closest.distanceTo(target) < getFireRange())
							&& fireOK)// for cooldown
					{
						fireBullet();
						bulletsFired++;

						fireTimer = getFireDelay();
					}
					// ++++++++++++++++++++++++++++++++
					if (bulletsFired >= 5) {
						fireOK = false;
						bulletsFired = 0;
					}
					// ++++++++++++++++++++++++++++++++++++++++++++++

				}

				// initiate fireCoolDown
				if (!fireOK) {
					fireCoolDown--;
					if (fireCoolDown < 0) {
						fireCoolDown = getFireCoolDown();
						fireOK = true;
					}
				}
				;
			}
		});
	}

	// public abstract int fireRate();
	public abstract double getFireRange();

	public abstract int getFireDelay();

	public abstract Bullet createBullet();

	public abstract double getBulletSpeed();

	public abstract double getBulletPowa();

	public abstract int getFireCoolDown();

	public void fireBullet() {
		final Bullet b = createBullet();
		b.setRotation(this.getRotation());
		final ConstantMovementController c = ConstantMovementController
				.createPolar(getBulletSpeed(), getRotation());
		b.addController(c);
		snapAnchor(b);
		b.moveAtAngle(getWidth() / 2 + 20, getRotation());
		this.addSibling(b);
	}
}
