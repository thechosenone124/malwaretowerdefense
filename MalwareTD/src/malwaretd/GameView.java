package malwaretd;

import jgame.Context;
import jgame.GContainer;
import jgame.GObject;
import jgame.GSprite;
import jgame.ImageCache;
import jgame.controller.MouseLocationController;
import jgame.listener.LocalClickListener;
import jgame.listener.TimerListener;



public class GameView extends GContainer {
	double trojanspawn = 10;
	double virusspawn = 4;
	double wormspawn = 2;
	
	

	public GameView() {
		
		

		super(new GSprite(ImageCache.forClass(MalwareTD.class).get(
				"/Background1.png")));
		// Set the size.
		setSize(640, 640);
		
	

		TimerListener spawnmaster = new TimerListener(10*30) {
			@Override
			public void invoke(jgame.GObject target, Context context) {
			// TODO Auto-generated method stub
				if (virusspawn>.5)
					virusspawn-=.5;

				
				if (wormspawn>.5)
					wormspawn-=.5;

				
				if (trojanspawn>.5)
					trojanspawn-=.5;
			}
		};
		
		SpawnListener spawnVirus = new SpawnListener(virusspawn) {
		    @Override
		    
			public  Enemy createEnemy() {
		        return new Enemy1();
		    }
		};
		
		SpawnListener spawnWorm = new SpawnListener(wormspawn) {
		    @Override
			public  Enemy createEnemy() {
		        return new Enemy2();
		    }
		};
		
		SpawnListener spawnTrojan = new SpawnListener(trojanspawn) {
		    @Override
			public  Enemy createEnemy() {
		        return new Enemy3();
		    }
		};
		
//////////////////////////////Old Enemy Spawn Code////////////////////////////////////		
//		TimerListener virusmaker = new TimerListener((int)(virusspawn*30)) {		//
//			@Override																//
//			public void invoke(jgame.GObject target, jgame.Context context) {		//
//				Enemy1 virus = new Enemy1();										//
//				ArrayList<Enemy1> list = new ArrayList<Enemy1>();					//
//				list.add(virus);													//
//				addAt(virus, 1000, 1000);											//
//				setInterval((int)(virusspawn*30));									//
//																					//
//			}																		//
//																					//
//		};																			//
//		TimerListener wormmaker = new TimerListener((int)(wormspawn*30)) {			//
//			@Override																//
//			public void invoke(jgame.GObject target, jgame.Context context) {		//
//				Enemy2 worm = new Enemy2();											//
//				ArrayList<Enemy2> list = new ArrayList<Enemy2>();					//
//				list.add(worm);														//
//				addAt(worm, 1000, 1000);											//
//																					//
//				setInterval((int)(wormspawn*30));									//
//																					//
//			}																		//
//		};																			//
//		TimerListener trojanmaker = new TimerListener((int)(trojanspawn *30)) {		//
//			@Override																//
//			public void invoke(jgame.GObject target, jgame.Context context) {		//
//				Enemy3 trojan = new Enemy3();										//
//				ArrayList<Enemy3> list = new ArrayList<Enemy3>();					//
//				list.add(trojan);													//
//				addAt(trojan, 1000, 1000);											//
//																					//
//					setInterval((int)(trojanspawn *30));							//
//			}																		//
//		};																			//
//		addListener(virusmaker);													//
//		addListener(wormmaker);														//
//		addListener(trojanmaker);													//
//////////////////////////////////////////////////////////////////////////////////////	
		
		
		addListener(spawnmaster); //probably doesn't do anything, but whatever
		addListener(spawnWorm);
		addListener(spawnVirus);
		addListener(spawnTrojan);
		
		MenuArea ma = new MenuArea();
		addAt(ma,320,560);
	}

	
	  public void initializeTurret(int tn) {
		  
	  
	       
		
	        
	        // This is only run when init turret is called
	        
	        //Turret1 t1 = new Turret1(ImageCache.getImage("/t1.png"));
	        Turret t = chooseTurret(tn);
			  this.addAtCenter(t);
			  
			  final MouseLocationController mlc = new MouseLocationController();
			  t.addController(mlc);
			 
			  final LocalClickListener dropListener = new LocalClickListener(){

				@Override
				public void invoke(GObject target, Context context) {
					target.removeController(mlc);
					target.removeListener(this);
					
					
					
				}
				  
			  };
			  
			  t.addListener(dropListener);
			  
	  }
	  public Turret chooseTurret(int Turretn)
	  {
		  switch (Turretn) {
          case 0:
                  return new Turret1(ImageCache.getImage("/t1.png"));
          case 1:
                  return new Turret2(ImageCache.getImage("/t2.png"));
          case 2:
                  return new Turret3(ImageCache.getImage("/t3.png"));
          case 3:
                  return new Turret4(ImageCache.getImage("/t4.png"));
          case 4:
                  return new Turret5(ImageCache.getImage("/t5.png"));

          default:
                  return null;
	  }
	  
}
}

